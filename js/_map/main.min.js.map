{"version":3,"file":"main.min.js","sources":["main.js"],"sourcesContent":["'use strict';\n\n/**\n * Code\n */\n// The form validation list\nconst MSG_ERROR = {\n  date: {\n    invalid: 'Must be a valid date',\n    max: 'The date must be in the past or today',\n    min: '' // The value is generated below\n  },\n\n  input: {\n    'input-day': {\n      invalid: 'Must be a valid day',\n      max: '',\n      min: 'Must be >= 1'\n    },\n    'input-month': {\n      invalid: 'Must be a valid month',\n      max: 'Must be <= 12',\n      min: 'Must be >= 1'\n    },\n    'input-year': {\n      invalid: 'Must be a valid year',\n      max: 'Must be in the past',\n      min: '' // The value is generated below\n    }\n  },\n\n  required: 'This field is required'\n};\n// Upd. according to the task design\nMSG_ERROR.input['input-day'].min = MSG_ERROR.input['input-day'].max = MSG_ERROR.input['input-day'].invalid;\nMSG_ERROR.input['input-month'].min = MSG_ERROR.input['input-month'].max = MSG_ERROR.input['input-month'].invalid;\nconst btnSubmit = document.querySelector('.btn');\nconst inputArr = Object.keys(MSG_ERROR.input);\nconst outputArr = ['output-day', 'output-month', 'output-year'];\nconst outputData = document.body.querySelector('.output-row');\n// Previous error state\nconst wasError = {\n  date: false,\n  input: false\n};\nlet inputDateMin;\nlet formDataPrev;\n// Click event handler\nbtnSubmit.addEventListener('click', e => {\n  // Stop submit event\n  e.preventDefault();\n  // Define the form element\n  const form = e.target.form;\n  // IF the input data has not changed THEN return\n  let formData = new FormData(form).values();\n  formData = [...formData].join(',');\n  if (formDataPrev === formData) return;\n  // ELSE save the form data string:\n  formDataPrev = formData;\n  // Define error vars\n  let isError;\n  let msgError;\n  // Define the form elements\n  const formCollection = form.elements;\n  // Define the current date\n  const dateNow = new Date();\n  dateNow.setHours(0, 0, 0, 0); // Reset time\n  const dateYear = dateNow.getFullYear();\n  // Upd. data related to the year\n  if (Number(formCollection['input-year'].max) !== dateYear) {\n    formCollection['input-year'].max = `${dateYear}`;\n  }\n  if (!MSG_ERROR.input['input-year'].min) {\n    MSG_ERROR.input['input-year'].min = `Must be >= ${formCollection['input-year'].min}`;\n  }\n  // (Commented, according to the task design)\n  // Checking and generating [max] day and the error message of the max day number of the month\n  // const inputMonthDayMax = new Date(Number(formCollection['input-year'].value), Number(formCollection['input-month'].value), 0).getDate();\n  // if (Number(formCollection['input-day'].max) !== inputMonthDayMax) formCollection['input-day'].max = `${inputMonthDayMax}`;\n  // if (!MSG_ERROR.input['input-day'].max) MSG_ERROR.input['input-day'].max = `Must be <= ${formCollection['input-day'].max}`;\n  /**\n   * 1. Check input fields\n   * - IF the form is invalid\n   * - Check all input fields\n   * - Show/hide error messages\n   * - IF the form is valid OR was invalid\n   * - Just hide error messages\n   */\n  const formValidity = !form.checkValidity(); // (Opposite state)\n  if (formValidity || wasError.input) {\n    // Save the error state\n    wasError.input = formValidity;\n    // Check all input fields\n    inputArr.forEach(inputName => {\n      isError = formValidity;\n      msgError = '';\n      const inputError = MSG_ERROR.input[inputName];\n      const inputValidity = formCollection[inputName].validity;\n      // Define the error message element\n      if (!inputError.tag) {\n        inputError.tag = formCollection[inputName].parentNode.querySelector('.date-msg-error');\n      }\n      // IF error THEN check the error type\n      if (isError) {\n        if (inputValidity.valueMissing) {\n          msgError = MSG_ERROR.required;\n        } else if (inputValidity.rangeUnderflow) {\n          msgError = inputError.min;\n        } else if (inputValidity.rangeOverflow) {\n          msgError = inputError.max;\n        } else {\n          isError = false; // Unplanned error ðŸ˜…\n        }\n      }\n      // IF an error THEN insert the error message\n      if (isError) inputError.tag.textContent = msgError;\n      // IF NOT an error THEN the error message is \"hidden\" (hide it)\n      inputError.tag.hidden = !isError;\n    });\n  }\n  /**\n   * 2. Check the full input date\n   * - Share variables with output (step 3)\n   * - Inputs are valid (step 1) OR full date was invalid\n   * - IF inputs are invalid\n   * - Undo full date \"was\" state AND hide the error message\n   * - IF inputs are valid\n   * - Check the full date\n   * - Show/hide the error message\n   */\n  let inputYear, inputMonth, inputDay, inputDateMs;\n  if (!wasError.input || wasError.date) {\n    msgError = '';\n    // Define the error message element\n    if (!MSG_ERROR.date.tag) {\n      MSG_ERROR.date.tag = formCollection['date-field'].querySelector(':scope > .date-msg-error');\n    }\n    // IF there is an input error after the date error\n    if (wasError.input) {\n      isError = false;\n    } else {\n      isError = true;\n      // Define the input date values\n      inputDay = Number(formCollection['input-day'].value);\n      inputMonth = Number(formCollection['input-month'].value);\n      inputYear = Number(formCollection['input-year'].value);\n      const inputDate = new Date(inputYear, inputMonth - 1, inputDay);\n      inputDateMs = inputDate.getTime();\n      if (!inputDateMin) inputDateMin = new Date(Number(formCollection['input-year'].min), 0, 1); // (YYYY.min)-01-01\n      // Check the full date from inputs\n      if (inputDate.getDate() != inputDay) {\n        msgError = MSG_ERROR.date.invalid; // The day number of the month is mismatched\n      } else if (inputDateMs > dateNow.getTime()) {\n        msgError = MSG_ERROR.date.max;\n      } else if (inputDateMs < inputDateMin.getTime()) {\n        if (!MSG_ERROR.date.min) {\n          MSG_ERROR.date.min = `Must be after ${inputDateMin.toLocaleDateString(navigator.language)}`;\n        }\n        msgError = MSG_ERROR.date.min;\n      } else {\n        isError = false;\n      }\n    }\n    // IF an error THEN insert the error message\n    if (isError) MSG_ERROR.date.tag.textContent = msgError;\n    // IF NOT an error THEN the error message is false (hide it)\n    MSG_ERROR.date.tag.hidden = !isError;\n    // Save the error state\n    wasError.date = isError;\n  }\n  /**\n   * 3. Output the result\n   * - IF any error THEN show the placeholder\n   * - ELSE calculate the difference in years, months and days\n   */\n  const inputDateClassList = formCollection['date-field'].classList;\n  // IF there was any error THEN show the placeholder\n  if (wasError.input || wasError.date) {\n    // Add error class\n    inputDateClassList.add('date-error');\n    // Accessibility\n    if (outputData.ariaLive !== 'off') {\n      outputData.ariaLive = 'off';\n      outputArr.forEach(outputName => {\n        const outputTag = formCollection[outputName];\n        outputTag.ariaLabel = 'none';\n        outputTag.value = outputTag.defaultValue; // Add the default value (placeholder)\n      });\n    }\n  } else {\n    // Remove error class\n    inputDateClassList.remove('date-error');\n    // Accessibility\n    if (outputData.ariaLive === 'off') {\n      outputArr.forEach(outputName => {\n        formCollection[outputName].removeAttribute('aria-label'); // Remove [aria-label=none]\n      });\n\n      outputData.ariaLive = 'assertive';\n    }\n    // Get current date values\n    const dateDay = dateNow.getDate();\n    const dateMonth = dateNow.getMonth();\n    const dateMonthDayMax = new Date(dateYear, dateMonth, 0).getDate();\n    // Input date is less or equal to the date now of the same year\n    const leDateNow = new Date(dateNow).setFullYear(inputYear) >= inputDateMs;\n    // Input day is greater than day now\n    const gtDayNow = dateDay < inputDay;\n    // Calc. years\n    let diffInYears = dateYear - inputYear;\n    diffInYears += leDateNow ? 0 : -1;\n    formCollection['output-year'].value = `${diffInYears}`;\n    // Calc. months\n    let diffInMonths = dateMonth - inputMonth;\n    diffInMonths += leDateNow ? 0 : 12;\n    diffInMonths += gtDayNow ? 0 : 1;\n    formCollection['output-month'].value = `${diffInMonths}`;\n    // Calc. days\n    let diffInDays = dateDay - inputDay;\n    diffInDays += gtDayNow ? dateMonthDayMax : 0;\n    formCollection['output-day'].value = `${diffInDays}`;\n  }\n});"],"names":["MSG_ERROR","date","invalid","max","min","input","input-day","input-month","input-year","required","btnSubmit","document","querySelector","inputArr","Object","keys","outputArr","outputData","body","wasError","let","inputDateMin","formDataPrev","addEventListener","e","preventDefault","form","target","formData","FormData","values","join","isError","msgError","formCollection","elements","dateNow","Date","dateYear","setHours","getFullYear","Number","formValidity","checkValidity","forEach","inputName","inputError","inputValidity","validity","tag","parentNode","valueMissing","rangeUnderflow","rangeOverflow","textContent","hidden","inputYear","inputMonth","inputDay","inputDateMs","value","inputDate","getTime","getDate","toLocaleDateString","navigator","language","dateMonthDayMax","gtDayNow","diffInDays","inputDateClassList","classList","add","ariaLive","outputName","outputTag","ariaLabel","defaultValue","remove","removeAttribute","dateDay","dateMonth","getMonth","leDateNow","setFullYear","diffInYears","diffInMonths"],"mappings":"AAAA,aAMA,MAAMA,UAAY,CAChBC,KAAM,CACJC,QAAS,uBACTC,IAAK,wCACLC,IAAK,EACP,EAEAC,MAAO,CACLC,YAAa,CACXJ,QAAS,sBACTC,IAAK,GACLC,IAAK,cACP,EACAG,cAAe,CACbL,QAAS,wBACTC,IAAK,gBACLC,IAAK,cACP,EACAI,aAAc,CACZN,QAAS,uBACTC,IAAK,sBACLC,IAAK,EACP,CACF,EAEAK,SAAU,wBACZ,EAIMC,WAFNV,UAAUK,MAAM,aAAaD,IAAMJ,UAAUK,MAAM,aAAaF,IAAMH,UAAUK,MAAM,aAAaH,QACnGF,UAAUK,MAAM,eAAeD,IAAMJ,UAAUK,MAAM,eAAeF,IAAMH,UAAUK,MAAM,eAAeH,QACvFS,SAASC,cAAc,MAAM,GACzCC,SAAWC,OAAOC,KAAKf,UAAUK,KAAK,EACtCW,UAAY,CAAC,aAAc,eAAgB,eAC3CC,WAAaN,SAASO,KAAKN,cAAc,aAAa,EAEtDO,SAAW,CACflB,KAAM,CAAA,EACNI,MAAO,CAAA,CACT,EACAe,IAAIC,aACAC,aAEJZ,UAAUa,iBAAiB,QAASC,IAElCA,EAAEC,eAAe,EAEjB,IAAMC,EAAOF,EAAEG,OAAOD,KAGtBE,EAAW,CAAC,GADG,IAAIC,SAASH,CAAI,EAAEI,OAAO,GAChBC,KAAK,GAAG,EACjC,GAAIT,eAAiBM,EAArB,CAEAN,aAAeM,EAEfR,IAAIY,EACAC,EAEJ,MAAMC,EAAiBR,EAAKS,SAE5B,IAAMC,EAAU,IAAIC,KAEdC,GADNF,EAAQG,SAAS,EAAG,EAAG,EAAG,CAAC,EACVH,EAAQI,YAAY,GAEjCC,OAAOP,EAAe,cAAc/B,GAAG,IAAMmC,IAC/CJ,EAAe,cAAc/B,IAAM,GAAGmC,GAEnCtC,UAAUK,MAAM,cAAcD,MACjCJ,UAAUK,MAAM,cAAcD,IAAM,cAAc8B,EAAe,cAAc9B,KAejF,MAAMsC,EAAe,CAAChB,EAAKiB,cAAc,GACrCD,GAAgBvB,SAASd,SAE3Bc,SAASd,MAAQqC,EAEjB7B,SAAS+B,QAAQC,IACfb,EAAUU,EACVT,EAAW,GACX,IAAMa,EAAa9C,UAAUK,MAAMwC,GAC7BE,EAAgBb,EAAeW,GAAWG,SAE3CF,EAAWG,MACdH,EAAWG,IAAMf,EAAeW,GAAWK,WAAWtC,cAAc,iBAAiB,GAGnFoB,IACEe,EAAcI,aAChBlB,EAAWjC,UAAUS,SACZsC,EAAcK,eACvBnB,EAAWa,EAAW1C,IACb2C,EAAcM,cACvBpB,EAAWa,EAAW3C,IAEtB6B,EAAU,CAAA,GAIVA,IAASc,EAAWG,IAAIK,YAAcrB,GAE1Ca,EAAWG,IAAIM,OAAS,CAACvB,CAC3B,CAAC,GAYHZ,IAAIoC,EAAWC,EAAYC,EAAUC,EAChCxC,SAASd,OAASc,CAAAA,SAASlB,OAC9BgC,EAAW,GAENjC,UAAUC,KAAKgD,MAClBjD,UAAUC,KAAKgD,IAAMf,EAAe,cAActB,cAAc,0BAA0B,GAGxFO,SAASd,MACX2B,EAAU,CAAA,GAEVA,EAAU,CAAA,EAEV0B,EAAWjB,OAAOP,EAAe,aAAa0B,KAAK,EACnDH,EAAahB,OAAOP,EAAe,eAAe0B,KAAK,EACvDJ,EAAYf,OAAOP,EAAe,cAAc0B,KAAK,EAC/CC,EAAY,IAAIxB,KAAKmB,EAAWC,EAAa,EAAGC,CAAQ,EAC9DC,EAAcE,EAAUC,QAAQ,EAC3BzC,aAAAA,cAA6B,IAAIgB,KAAKI,OAAOP,EAAe,cAAc9B,GAAG,EAAG,EAAG,CAAC,EAErFyD,EAAUE,QAAQ,GAAKL,EACzBzB,EAAWjC,UAAUC,KAAKC,QACjByD,EAAcvB,EAAQ0B,QAAQ,EACvC7B,EAAWjC,UAAUC,KAAKE,IACjBwD,EAActC,aAAayC,QAAQ,GACvC9D,UAAUC,KAAKG,MAClBJ,UAAUC,KAAKG,IAAM,iBAAiBiB,aAAa2C,mBAAmBC,UAAUC,QAAQ,GAE1FjC,EAAWjC,UAAUC,KAAKG,KAE1B4B,EAAU,CAAA,GAIVA,IAAShC,UAAUC,KAAKgD,IAAIK,YAAcrB,GAE9CjC,UAAUC,KAAKgD,IAAIM,OAAS,CAACvB,EAE7Bb,SAASlB,KAAO+B,GAOlB,IA4BQmC,EAIAC,EAWFC,EA3CAC,EAAqBpC,EAAe,cAAcqC,UAEpDpD,SAASd,OAASc,SAASlB,MAE7BqE,EAAmBE,IAAI,YAAY,EAEP,QAAxBvD,WAAWwD,WACbxD,WAAWwD,SAAW,MACtBzD,UAAU4B,QAAQ8B,IACVC,EAAYzC,EAAewC,GACjCC,EAAUC,UAAY,OACtBD,EAAUf,MAAQe,EAAUE,YAC9B,CAAC,KAIHP,EAAmBQ,OAAO,YAAY,EAEV,QAAxB7D,WAAWwD,WACbzD,UAAU4B,QAAQ8B,IAChBxC,EAAewC,GAAYK,gBAAgB,YAAY,CACzD,CAAC,EAED9D,WAAWwD,SAAW,aAGlBO,EAAU5C,EAAQ2B,QAAQ,EAC1BkB,EAAY7C,EAAQ8C,SAAS,EAC7Bf,EAAkB,IAAI9B,KAAKC,EAAU2C,EAAW,CAAC,EAAElB,QAAQ,EAE3DoB,EAAY,IAAI9C,KAAKD,CAAO,EAAEgD,YAAY5B,CAAS,GAAKG,EAExDS,EAAWY,EAAUtB,EAEvB2B,EAAc/C,EAAWkB,EAC7B6B,GAAeF,EAAY,EAAI,CAAC,EAChCjD,EAAe,eAAe0B,MAAQ,GAAGyB,EAIzCC,GAFIA,EAAeL,EAAYxB,IACf0B,EAAY,EAAI,KAChBf,EAAW,EAAI,GAC/BlC,EAAe,gBAAgB0B,MAAQ,GAAG0B,EAEtCjB,EAAaW,EAAUtB,EAC3BW,GAAcD,EAAWD,EAAkB,EAC3CjC,EAAe,cAAc0B,MAAQ,GAAGS,EApKL,CAsKvC,CAAC"}